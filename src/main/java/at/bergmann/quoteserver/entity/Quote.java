package at.bergmann.quoteserver.entity;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import jakarta.validation.constraints.NotBlank;
import jakarta.validation.constraints.Size;

import java.util.Objects;

/**
 * Entity class representing a Quote in the system.
 * This class is mapped to a database table using JPA annotations.
 */
@Entity
public class Quote {
    /**
     * Unique identifier for the quote.
     * Automatically generated by the database.
     */
    @Id
    @GeneratedValue(strategy = GenerationType.AUTO)
    private Long id;

    /**
     * The actual quote text.
     * Must not be blank and cannot exceed 1000 characters.
     */
    @NotBlank(message = "Quote text cannot be blank")
    @Size(max = 1000, message = "Quote text cannot exceed 1000 characters")
    private final String quote;

    /**
     * The author of the quote.
     * Must not be blank and cannot exceed 100 characters.
     */
    @NotBlank(message = "Author cannot be blank")
    @Size(max = 100, message = "Author name cannot exceed 100 characters")
    private final String author;

    /**
     * Protected no-args constructor required by JPA.
     * Initializes fields to null.
     */
    protected Quote() {
        this.quote = null;
        this.author = null;
    }

    /**
     * Creates a new Quote with the specified text and author.
     *
     * @param quote  The quote text
     * @param author The author of the quote
     */
    public Quote(final String quote, final String author) {
        this.quote = quote;
        this.author = author;
    }

    /**
     * Returns the unique identifier of this quote.
     *
     * @return The quote's ID
     */
    public Long getId() {
        return id;
    }

    /**
     * Returns the text of this quote.
     *
     * @return The quote text
     */
    public String getQuote() {
        return quote;
    }

    /**
     * Returns the author of this quote.
     *
     * @return The quote's author
     */
    public String getAuthor() {
        return author;
    }

    /**
     * Compares this quote with another object for equality.
     * Two quotes are considered equal if they have the same ID, quote text, and author.
     *
     * @param o The object to compare with
     * @return true if the objects are equal, false otherwise
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Quote quote1 = (Quote) o;
        return Objects.equals(id, quote1.id) && 
               Objects.equals(quote, quote1.quote) && 
               Objects.equals(author, quote1.author);
    }

    /**
     * Returns a hash code value for this quote.
     *
     * @return The hash code
     */
    @Override
    public int hashCode() {
        return Objects.hash(id, quote, author);
    }

    /**
     * Returns a string representation of this quote.
     *
     * @return A string containing the quote's ID, text, and author
     */
    @Override
    public String toString() {
        return String.format("Quote[id=%d, quote='%s', author='%s']", id, quote, author);
    }
}
